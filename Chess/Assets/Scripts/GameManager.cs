//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Enumeration of the colors
/// (Menu = 0, Classic).
/// </summary>
public enum GameMode {Menu, Classic};

/// <summary>
/// Enumeration of the colors
/// (Wait = 0, Select = 1, Action = 2).
/// </summary>
public enum GameState {Wait, Select, Action};



public class GameManager : MonoBehaviour
{
    private GameMode currentGameMode = GameMode.Classic;
    private GameState currentGameState = GameState.Select;
    public ChessPiece activePiece;
    public TeamColor turnTeamColor = TeamColor.Black;
    public Board Board {get; private set;}
    /// <summary>
    /// A Vector3 used for position calculations.
    /// </summary>
    protected Vector3 Position;

    void Awake()
    {

    }

    void Start()
    {
        Board = new Board(GameObject.FindObjectsOfType<BoardSpace>()); //Create the Board
    }

    // Update is called once per frame
    void Update()
    {

    }

    public void AdvanceGameState() 
    {
        switch (currentGameState) 
        { 
            case GameState.Wait:
                currentGameState = GameState.Wait;
                break;
            case GameState.Select:
                currentGameState = GameState.Action;
                (activePiece.GetComponent("Halo") as Behaviour).enabled = true;
                break;
            case GameState.Action:
                currentGameState = GameState.Select;
                Board.clearAvailableSpaces();
                break;
        
        }
    }

    public void ChangeTurn() {
        switch (turnTeamColor){
            case (TeamColor.Black):
                turnTeamColor = TeamColor.White;
                break;
            case (TeamColor.White):
                turnTeamColor = TeamColor.Black;
                break;
        }
    }

    public void PieceHover(ChessPiece piece) 
    {
        if (turnTeamColor == piece.PieceColor)
        {
            Behaviour halo = piece.GetComponent("Halo") as Behaviour;
            halo.enabled = !halo.enabled;
        }
    }

    public void SelectPiece(ChessPiece piece)
    {
        if (turnTeamColor == piece.PieceColor)
        {
            if (activePiece == piece)
            {
                Debug.Log("stuff");
                DeselectPiece(piece);
            }
            else
            {
                BoardSpace[] availableSpaces = piece.GetAvailableSpaces();
                DisplaySpaces(availableSpaces);
                activePiece = piece;
                Debug.Log(activePiece);
                AdvanceGameState();
            }
        }
        return;
    }

    public void DeselectPiece(ChessPiece piece)
    {
        if (turnTeamColor == piece.PieceColor)
        {
            BoardSpace[] availableSpaces = piece.GetAvailableSpaces();
            HideSpaces(availableSpaces);
            AdvanceGameState();
            HideSpaces(availableSpaces);
        }
    }
    /// <summary>
    /// Moves the GameManager's activePiece to the destination BoardSpace.
    /// </summary>
    /// <param name="destination"></param>
    public void MovePiece(BoardSpace destination) 
    { 
        Position.x = destination.transform.position.x;
        Position.z = destination.transform.position.z;
        Position.y = activePiece.transform.position.y;
        activePiece.transform.position = Position;
        activePiece.currentSpace = destination;
        activePiece.bHasMoved = true;
        ChangeTurn();
    }

    /// <summary>
    /// Moves a passed in ChessPiece to the destination BoardSpace
    /// </summary>
    /// <param name="pieceToMove"></param>
    /// <param name="destination"></param>
    public void MovePiece(ChessPiece pieceToMove, BoardSpace destination) 
    {
        Position.x = destination.transform.position.x;
        Position.z = destination.transform.position.z;
        Position.y = pieceToMove.transform.position.y;
        pieceToMove.transform.position = Position;
        pieceToMove.currentSpace = destination;
        pieceToMove.bHasMoved = true;
        ChangeTurn();
    
    }

    public void DisplaySpaces(BoardSpace[] spacesToDisplay)
    {
        foreach (BoardSpace space in spacesToDisplay)
        {
            if (space != null)
            {
                space.spaceState = SpaceState.Open;
                Renderer meshRenderer = space.GetComponent<Renderer>();
                meshRenderer.enabled = true;
            }
        }

    }

    public void HideSpaces(BoardSpace[] spacesToHide)
    {
        foreach (BoardSpace space in spacesToHide)
        {
            if (space != null)
            {
                space.spaceState = SpaceState.Default;
                Renderer meshRenderer = space.GetComponent<Renderer>();
                meshRenderer.enabled = false;
                AdvanceGameState();
            }
        }
    }
}




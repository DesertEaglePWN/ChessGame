//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Enumeration of the colors
/// (Menu = 0, Classic).
/// </summary>
public enum GameMode {Menu, Classic};

/// <summary>
/// Enumeration of the colors
/// (Wait = 0, Select = 1, Action = 2).
/// </summary>
public enum GameState {Wait, Select, Action};



public class GameManager : MonoBehaviour
{
    public static GameManager currentInstance;
    public MaterialLibrary materialLibrary;
    private GameMode currentGameMode = GameMode.Classic;
    private GameState currentGameState = GameState.Select;

  //  public bool EnPassantPossible { get; set; }
    public ChessPiece activePiece = null;
    public TeamColor turnTeamColor = TeamColor.Black;
    public Board Board {get; private set;}
    BoardSpace[] availableSpaces;
    ChessPiece[] chessPieces;

    void Awake()
    {
        currentInstance = this;
        materialLibrary = this.gameObject.GetComponent<MaterialLibrary>();
    }

    void Start()
    {
        Board = new Board(GameObject.FindObjectsOfType<BoardSpace>()); //Create the Board
        chessPieces = GameObject.FindObjectsOfType<ChessPiece>();    //Store all ChessPieces for later
    }

    public void AdvanceGameState() 
    {
        switch (currentGameState) 
        { 
            case GameState.Wait:
                currentGameState = GameState.Wait;
                break;
            case GameState.Select:
                currentGameState = GameState.Action;
                InactiveColliderEnable(false);
                break;
            case GameState.Action:
                foreach (BoardSpace space in Board.spaces) 
               {
                   space.spaceState = SpaceState.Default;
                }
                currentGameState = GameState.Select;
                InactiveColliderEnable(true);
                HideSpaces(availableSpaces);
                activePiece = null;
                break;
        
        }
    }

    public void ChangeTurn() {
        switch (turnTeamColor){
            case (TeamColor.Black):
                turnTeamColor = TeamColor.White;
                break;
            case (TeamColor.White):
                turnTeamColor = TeamColor.Black;
                break;
        }
        
    }

    /// <summary>
    /// Toggles a piece's "Halo" effect
    /// </summary>
    /// <param name="piece"></param>
    public void PieceHover(ChessPiece piece) 
    {
        if ((turnTeamColor == piece.PieceColor))
        {
            Behaviour halo = piece.GetComponent("Halo") as Behaviour;
            halo.enabled = !halo.enabled;
        }
    }

    public void SelectPiece(ChessPiece piece)
    {
                activePiece = piece;
                availableSpaces = piece.GetAvailableSpaces();

                //Debug.Log("Available Spaces-----");
                //foreach (BoardSpace space in availableSpaces) {
                //    Debug.Log(space);
                //}
                //Debug.Log("---------------------");

                DisplaySpaces(availableSpaces);
                AdvanceGameState();
               
        return;
    }

    public void DeselectPiece(ChessPiece piece)
    {
        if (turnTeamColor == piece.PieceColor)
        {
            BoardSpace[] availableSpaces = piece.GetAvailableSpaces();
            HideSpaces(availableSpaces);
            AdvanceGameState();
            HideSpaces(availableSpaces);
            activePiece = null;
        }
    }

    /// <summary>
    /// Moves the GameManager's activePiece to the destination BoardSpace.
    /// </summary>
    /// <param name="destination"></param>
    public void MovePiece(BoardSpace destination) 
    {
        MovePiece(activePiece, destination);
    }
    /// <summary>
    /// Moves a passed in ChessPiece to the destination BoardSpace
    /// </summary>
    /// <param name="pieceToMove"></param>
    /// <param name="destination"></param>
    public void MovePiece(ChessPiece piece, BoardSpace destination) 
    {
        if ((piece.GetType() == typeof(King)) && ((piece as King).CanCastle)) {
            castleMove(piece, destination);
        }
        piece.transform.position = new Vector3(destination.transform.position.x,piece.transform.position.y, destination.transform.position.z);
        piece.currentSpace.OccupyingPiece = null;   //clear old space's OccupyingPiece
        piece.currentSpace = destination;
        destination.OccupyingPiece = piece;
        piece.bHasMoved = true;
        ChangeTurn();
    
    }

    public void RemovePiece(ChessPiece piece) {
        GameObject.Destroy(piece.gameObject);
    }
    public void DisplaySpaces(BoardSpace[] spacesToDisplay)
    {
        foreach (BoardSpace space in spacesToDisplay)
        {
            if (space != null)
            {
                Renderer meshRenderer = space.GetComponent<Renderer>();
                Collider spaceCollider = space.GetComponent<Collider>();
                switch (space.spaceState){
                    case SpaceState.Contested:
                        meshRenderer.material = materialLibrary.materialSpaceContested;
                        break;
                    case SpaceState.Open:
                        meshRenderer.material = materialLibrary.materialSpaceOpen;
                        break;
                    case SpaceState.Blocked:
                        meshRenderer.material = materialLibrary.materialSpaceOpen;
                        break;
                    default:
                        meshRenderer.material = materialLibrary.materialSpaceOpen;
                        break;
                }
                meshRenderer.enabled = true;
                spaceCollider.enabled = true;
            }
        }

    }

    public void HideSpaces(BoardSpace[] spacesToHide)
    {
        foreach (BoardSpace space in spacesToHide)
        {
            if (space != null)
            {
                Renderer meshRenderer = space.GetComponent<Renderer>();
                Collider spaceCollider = space.GetComponent<Collider>();
                meshRenderer.enabled = false;
                spaceCollider.enabled = false;
            }
        }
    }

    /// <summary>
    /// Enables/Disables colliders for all chess pieces besides the active piece. 
    /// (True to Enable; False to Disable)
    /// </summary>
    /// <param name="Enable"></param>
    public void InactiveColliderEnable(bool Enable) 
    {
        foreach (ChessPiece piece in chessPieces)
        {
            if ((piece != activePiece) && (piece != null))
            {
                if (Enable == true) 
                {
                    piece.collider.enabled = true;
                }
                else if (Enable == false)
                {
                    piece.collider.enabled = false;
                }
            }
        }
    }
    
    /// <summary>
    /// Checks whether or not a Castle Move occured and moves the appropriate Rook if so.
    /// </summary>
    /// <param name="king"></param>
    /// <param name="destination"></param>
    private void castleMove(ChessPiece king, BoardSpace destination) {
        ChessPiece rook;
        BoardSpace rookSpace;
        Debug.Log("Running castleMove()");
        switch (king.PieceColor)
        {
            case (TeamColor.Black):
                if (destination.name == "C8")
                {
                    rook = GameObject.Find("A8").GetComponent<BoardSpace>().OccupyingPiece;
                    rookSpace = GameObject.Find("D8").GetComponent<BoardSpace>();
                    MovePiece(rook, rookSpace);
                    turnTeamColor = king.PieceColor;
                }
                else if (destination.name == "G8")
                {
                    rook = GameObject.Find("H8").GetComponent<BoardSpace>().OccupyingPiece;
                    rookSpace = GameObject.Find("F8").GetComponent<BoardSpace>();
                    MovePiece(rook, rookSpace);
                    turnTeamColor = king.PieceColor;
                }
                break;
            case (TeamColor.White):
                if (destination.name == "C1")
                {
                    rook = GameObject.Find("A1").GetComponent<BoardSpace>().OccupyingPiece;
                    rookSpace = GameObject.Find("D1").GetComponent<BoardSpace>();
                    MovePiece(rook, rookSpace);
                    turnTeamColor = king.PieceColor;
                }
                else if (destination.name == "G1")
                {
                    rook = GameObject.Find("H1").GetComponent<BoardSpace>().OccupyingPiece;
                    rookSpace = GameObject.Find("F1").GetComponent<BoardSpace>();
                    MovePiece(rook, rookSpace);
                    turnTeamColor = king.PieceColor;
                }
                break;
        }
    }
}




//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// Enumeration of the colors
/// (Menu = 0, Classic).
/// </summary>
public enum GameMode {Menu, Classic};

/// <summary>
/// Enumeration of the colors
/// (Wait = 0, Select = 1, Action = 2).
/// </summary>
public enum GameState {Wait, Select, Action};



public class GameManager : MonoBehaviour
{
    private GameMode currentGameMode = GameMode.Classic;
    private GameState currentGameState = GameState.Select;
    public ChessPiece activePiece;
    public TeamColor turnTeamColor = TeamColor.Black;
    public Board Board {get; private set;}
  
    void Awake()
    {

    }

    void Start()
    {
        Board = new Board(GameObject.FindObjectsOfType<BoardSpace>()); //Create the Board
    }

    // Update is called once per frame
    void Update()
    {

    }

    public void AdvanceGameState() 
    {
        switch (currentGameState) 
        { 
            case GameState.Wait:
                currentGameState = GameState.Wait;
                break;
            case GameState.Select:
                currentGameState = GameState.Action;
                (activePiece.GetComponent("Halo") as Behaviour).enabled = true;
                break;
            case GameState.Action:
                currentGameState = GameState.Select;
                Board.clearAvailableSpaces();
                break;
        
        }
    }

    public void ChangeTurn() {
        switch (turnTeamColor){
            case (TeamColor.Black):
                turnTeamColor = TeamColor.White;
                break;
            case (TeamColor.White):
                turnTeamColor = TeamColor.Black;
                break;
        }
    }

    public void PieceHover(ChessPiece piece) 
    {
        Behaviour halo = piece.GetComponent("Halo") as Behaviour;
        halo.enabled = !halo.enabled;
       
    }

    public void SelectPiece(ChessPiece piece)
    {
        Debug.Log(currentGameState);
        
        if (activePiece == piece)
        {
            Debug.Log("stuff");
            DeselectPiece(piece);
        }
        else
        {
            BoardSpace[] availableSpaces = piece.GetAvailableSpaces();
            DisplaySpaces(availableSpaces);
            activePiece = piece;
            Debug.Log(activePiece);
            AdvanceGameState();
        }
        return;
    }

    public void DeselectPiece(ChessPiece piece)
    {
        BoardSpace[] availableSpaces = piece.GetAvailableSpaces();
        HideSpaces(availableSpaces);
        AdvanceGameState();
        HideSpaces(availableSpaces);
    }


    public void DisplaySpaces(BoardSpace[] spacesToDisplay)
    {
        foreach (BoardSpace space in spacesToDisplay)
        {
            if (space != null)
            {
                space.spaceState = SpaceState.Open;
                Renderer meshRenderer = space.GetComponent<Renderer>();
                meshRenderer.enabled = true;
            }
        }

    }

    public void HideSpaces(BoardSpace[] spacesToHide)
    {
        foreach (BoardSpace space in spacesToHide)
        {
            if (space != null)
            {
                space.spaceState = SpaceState.Default;
                Renderer meshRenderer = space.GetComponent<Renderer>();
                meshRenderer.enabled = false;
                AdvanceGameState();
            }
        }
    }
}



